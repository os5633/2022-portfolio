"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareSingleProgressBar = exports.prepareMultiProgressBar = void 0;
const cli_progress_1 = require("cli-progress");
const constants_1 = require("./constants");
const monitorStream = async (docker, stream, onProgress) => new Promise((resolve, reject) => {
    function onFinished(error, output) {
        if (error) {
            reject(error);
        }
        else {
            resolve(output);
        }
    }
    docker.modem.followProgress(stream, onFinished, onProgress);
});
const prepareMultiProgressBar = () => {
    const barsById = new Map();
    const bars = new cli_progress_1.MultiBar({
        format: "{id} [{bar}] {status}",
        hideCursor: true,
    }, cli_progress_1.Presets.shades_grey);
    function onProgress(event) {
        const { id, progressDetail, status } = event;
        if (!id)
            return;
        let bar = barsById.get(id);
        if (bar) {
            if (status === "Pull complete") {
                bars.remove(bar);
                barsById.delete(id);
            }
            else if (progressDetail) {
                bar.setTotal(progressDetail.total);
                bar.update(progressDetail.current, { id, status });
            }
        }
        else if (progressDetail) {
            bar = bars.create(progressDetail.total, progressDetail.current, {
                id,
                status,
            });
            barsById.set(id, bar);
        }
    }
    function onDone() {
        bars.stop();
    }
    return [onProgress, onDone];
};
exports.prepareMultiProgressBar = prepareMultiProgressBar;
const prepareSingleProgressBar = () => {
    const progressById = new Map();
    const bar = new cli_progress_1.SingleBar({
        clearOnComplete: true,
        format: "    Downloading [{bar}] | {percentage}%",
        hideCursor: true,
    }, cli_progress_1.Presets.shades_grey);
    let barIsStarted = false;
    let totalImages = 20; // A guess to start, to help prevent the progress bar going backward
    function onProgress(event) {
        const { id, progressDetail } = event;
        if (!id || !progressDetail || typeof progressDetail.current !== "number")
            return;
        progressById.set(id, progressDetail);
        let combinedCurrent = 0;
        let trackedImages = 0;
        for (const detail of progressById.values()) {
            trackedImages += 1;
            combinedCurrent += Math.round((detail.current / detail.total) * 100);
        }
        if (trackedImages > totalImages)
            totalImages = trackedImages;
        const total = totalImages * 100;
        if (combinedCurrent > 0) {
            if (barIsStarted) {
                bar.setTotal(total);
                bar.update(combinedCurrent);
            }
            else {
                bar.start(total, combinedCurrent);
                barIsStarted = true;
            }
        }
    }
    function onDone() {
        bar.setTotal(100);
        bar.update(100);
        bar.stop();
    }
    return [onProgress, onDone];
};
exports.prepareSingleProgressBar = prepareSingleProgressBar;
async function pullRunnerImage(docker, verbose = false) {
    let onProgress;
    let onDone;
    if (verbose) {
        [onProgress, onDone] = exports.prepareMultiProgressBar();
    }
    else {
        [onProgress, onDone] = exports.prepareSingleProgressBar();
    }
    try {
        const stream = await docker.pull(constants_1.DOCKER_IMAGE_NAME);
        await monitorStream(docker, stream, onProgress);
    }
    catch (error) {
        console.log("Unable to pull the QA Wolf Docker image", error.message);
    }
    onDone();
}
exports.default = pullRunnerImage;
//# sourceMappingURL=pullRunnerImage.js.map