"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.launch = exports.getLaunchOptions = exports.getBrowserType = exports.parseBrowserName = void 0;
const os_1 = require("os");
const utils_1 = require("../utils");
const CONTEXT_OPTIONS = [
    "bypassCSP",
    "colorScheme",
    "deviceScaleFactor",
    "extraHTTPHeaders",
    "geolocation",
    "hasTouch",
    "httpCredentials",
    "ignoreHTTPSErrors",
    "timezoneId",
    "locale",
    "permissions",
    "userAgent",
    "viewport",
    "isMobile",
];
const parseBrowserName = (name) => {
    if (name === "firefox" || name === "webkit")
        return name;
    return "chromium";
};
exports.parseBrowserName = parseBrowserName;
const getBrowserType = (browserName) => {
    // We must use the browser type from the installed `playwright` or `playwright-browser` package,
    // and not `playwright-core` since they store different browser binaries.
    // See https://github.com/microsoft/playwright/issues/1191 for more details.
    let playwright;
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        playwright = require("playwright");
    }
    catch (error) {
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            playwright = require(`playwright-${browserName}`);
        }
        catch (error) {
            throw new Error("qawolf requires playwright to be installed");
        }
    }
    return playwright[browserName];
};
exports.getBrowserType = getBrowserType;
const getLaunchOptions = (browserName, options = {}) => {
    const launchOptions = {
        ...options,
    };
    const defaultArgs = [];
    if (browserName === "chromium" && os_1.platform() === "linux") {
        // We use --no-sandbox because we cannot change the USER for certain CIs (like GitHub).
        // "Ensure your Dockerfile does not set the USER instruction, otherwise you will not be able to access GITHUB_WORKSPACE"
        defaultArgs.push("--no-sandbox");
    }
    return {
        args: defaultArgs,
        // override args if they are provided
        ...launchOptions,
    };
};
exports.getLaunchOptions = getLaunchOptions;
const launch = async (options = {}) => {
    const browserName = exports.parseBrowserName(options.browser || process.env.QAWOLF_BROWSER);
    const launchOptions = exports.getLaunchOptions(browserName, options);
    const browser = await exports.getBrowserType(browserName).launch(launchOptions);
    const context = await browser.newContext(utils_1.pick(options, CONTEXT_OPTIONS));
    return { browser, context };
};
exports.launch = launch;
//# sourceMappingURL=launch.js.map