"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertText = exports.assertElement = void 0;
const assertElement = async (pageOrFrame, selector, options) => {
    try {
        await pageOrFrame.waitForSelector(selector, options);
    }
    catch (error) {
        throw error;
    }
};
exports.assertElement = assertElement;
const assertText = async (pageOrFrame, text, options = {}) => {
    const selector = options.selector || "body";
    const timeout = (options || {}).timeout || 30000;
    return new Promise(async (resolve, reject) => {
        let fulfilled = false;
        const timeoutId = setTimeout(() => {
            if (fulfilled)
                return;
            fulfilled = true;
            reject(new Error(`assertText: "${text}" not found in "${selector}"`));
        }, timeout);
        while (!fulfilled) {
            try {
                const hasText = await pageOrFrame.$eval(selector, (element, text) => {
                    var _a;
                    let elementText = element.value ||
                        element.innerText ||
                        "";
                    if (element.tagName.toLowerCase() === "select") {
                        const select = element;
                        elementText = ((_a = select.options[select.selectedIndex]) === null || _a === void 0 ? void 0 : _a.text) || "";
                    }
                    return elementText.includes(text);
                }, text);
                if (hasText && !fulfilled) {
                    fulfilled = true;
                    clearTimeout(timeoutId);
                    resolve();
                }
            }
            catch (e) { }
            await new Promise((r) => setTimeout(r, 100));
        }
    });
};
exports.assertText = assertText;
//# sourceMappingURL=assertText.js.map